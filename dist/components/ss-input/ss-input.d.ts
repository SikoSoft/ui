import { LitElement, PropertyValueMap } from 'lit';
import '../ss-input-auto/ss-input-auto';
import { SSInputProp, SSInputProps } from './ss-input.models';
export declare class SSInput extends LitElement {
    private clickFocusHandler;
    static styles: import("lit").CSSResult[];
    [SSInputProp.TYPE]: SSInputProps[SSInputProp.TYPE];
    [SSInputProp.VALUE]: SSInputProps[SSInputProp.VALUE];
    [SSInputProp.AUTO_COMPLETE]: SSInputProps[SSInputProp.AUTO_COMPLETE];
    [SSInputProp.PLACEHOLDER]: SSInputProps[SSInputProp.PLACEHOLDER];
    [SSInputProp.SUGGESTIONS]: SSInputProps[SSInputProp.SUGGESTIONS];
    [SSInputProp.MIN]?: SSInputProps[SSInputProp.MIN];
    [SSInputProp.MAX]?: SSInputProps[SSInputProp.MAX];
    [SSInputProp.STEP]?: SSInputProps[SSInputProp.STEP];
    _value: string;
    inputField: HTMLInputElement;
    autoCompleteNode: HTMLElement | undefined;
    container: HTMLSpanElement;
    hasFocus: boolean;
    autoDismissed: boolean;
    get showAutoComplete(): boolean;
    connectedCallback(): void;
    disconnectedCallback(): void;
    updated(changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    focus(): void;
    clear(): void;
    private handleChange;
    private handleKeyDown;
    private sendSuggestionUpEvent;
    private sendSuggestionDownEvent;
    private sendSuggestionSelectEvent;
    private sendSubmittedEvent;
    private handleSubmit;
    private handleInput;
    private handleFocus;
    private handleBlur;
    private suggestionSelectHandler;
    render(): import("lit-html").TemplateResult<1>;
}
